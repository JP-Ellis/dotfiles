#!/usr/bin/zsh

zparseopts -E -D -- \
    h=HELP \
    -help=HELP \
    i:=INPUT_FILE \
    -input:=INPUT_FILE \
    o:=OUTPUT_FILE \
    -output::=OUTPUT_FILE \
    f=FORCE \
    -force=FORCE \
    fv=FORCE_VIDEO \
    -force-video=FORCE_VIDEO \
    fa=FORCE_AUDIO \
    -force-audio=FORCE_AUDIO

if [[ ! -z "$HELP" ]]; then
    echo "${0:t} [options] INPUT [OUTPUT]"
    echo "Options"
    echo "  -h, --help           Print help message"
    echo "  -i, --input [FILE]   Set the input file"
    echo "  -o, --output [FILE]  Set the output file"
    echo "      If this is not specified, it is determined from the input file"
    echo "      based on the following rules:"
    echo "      - If the INPUT_FILE's extension is .mkv, the output file uses"
    echo "        the same base name with x265.mkv as the extension."
    echo "      - If the INPUT_FILE's extensions is not .mkv, the output file"
    echo "        uses the same base name with the .mkv."
    echo "  -f, --force          Force transcoding even if it is already in"
    echo "      in the desired target codec, for both video and audio."
    echo "  -fv, --force-video   Force transcoding video."
    echo "  -fa, --force-audio   Force transcoding audio."
    echo ""
    echo "If the input file is specified with an option, then any positional"
    echo "argument will be taken to be the output file."

    exit 0
fi

# Get the input file
if [[ -z "$INPUT_FILE[2]" ]]; then
    if [[ -z "$1" ]]; then
        echo "Input file must be provided." >&2
        exit 1
    else
        INPUT_FILE="$1"
        shift
    fi
else
    INPUT_FILE="$INPUT_FILE[2]"
fi

# Get the output file
if [[ -z "$OUTPUT_FILE[2]" ]]; then
    OUTPUT_FILE="$1"
    shift
else
    OUTPUT_FILE="$OUTPUT_FILE[2]"
fi

# If there are more arguments, give a warning
if [[ $# -ge 1 ]]; then
    echo "Unknown arguments: $@" >&2
    exit 1
fi

# Generate the output file name if it isn't given
if [[ -z "$OUTPUT_FILE" ]]; then
    if [[ "${INPUT_FILE:e}" = "mkv" ]]; then
        OUTPUT_FILE="${INPUT_FILE:r}.x265.mkv"
    else
        OUTPUT_FILE="${INPUT_FILE:r}.mkv"
    fi
fi

# If --force is given, force-audio and force-video are both enabled.
if [[ -n "$FORCE[2]" ]]; then
    FORCE_AUDIO="$FORCE[2]"
    FORCE_VIDEO="$FORCE[2]"
else
    FORCE_AUDIO="$FORCE_AUDIO[2]"
    FORCE_VIDEO="$FORCE_VIDEO[2]"
fi

NEEDS_TRANSCODING=false

## Create the video options
typeset -a VIDEO_OPTS
codecs=(
    $(
    ffprobe "$INPUT_FILE" \
            -v error \
            -select_streams v \
            -show_entries stream=codec_name \
            -print_format default=nk=1:nw=1
    )
)
i=0
for codec in $codecs ; do
    if [[ -n "$FORCE_VIDEO" || $codec != "hevc" ]]; then
        NEEDS_TRANSCODING=true
        VIDEO_OPTS+=(-c:v:$i libx265 -preset veryslow)
    else
        VIDEO_OPTS+=(-c:v:$i copy)
    fi
    ((i++))
done


# Create the audio options
typeset -a AUDIO_OPTS
codecs=(
    $(
    ffprobe "$INPUT_FILE" \
            -v error \
            -select_streams a \
            -show_entries stream=codec_name \
            -print_format default=nk=1:nw=1
    )
)
i=0
for codec in $codecs ; do
    if [[ -n "$FORCE_AUDIO" || $codec != "opus" ]]; then
        NEEDS_TRANSCODING=true
        AUDIO_OPTS+=(-c:a:$i libopus -b:a:$i 128k)

        # Libopus doesn't understand `5.1(side)` channels, but does understand
        # `5.1`; so we adjust this if need be.
        # https://trac.ffmpeg.org/ticket/5718
        channels=$(
            ffprobe "$INPUT_FILE" \
                    -v error \
                    -select_streams a:$i \
                    -show_entries stream=channel_layout \
                    -print_format default=nk=1:nw=1
                )
        if [[ "$channels" =~ "^.*\(side\)$" ]]; then
            AUDIO_OPTS+=(-filter:a:$i aformat=channel_layouts="${channels%%\(side\)}")
        elif [[ "$channels" = "unknown" ]]; then
            # If the layout is unknown, use the number of channels to infer the layout
            channels=$(
                ffprobe "$INPUT_FILE" \
                    -v error \
                    -select_streams a:$i \
                    -show_entries stream=channels \
                    -print_format default=nk=1:nw=1
                    )
            case $channels in
                (1)
                    AUDIO_OPTS+=(-filter:a:$i aformat=channel_layouts="mono")
                    ;;
                (2)
                    AUDIO_OPTS+=(-filter:a:$i aformat=channel_layouts="stereo")
                    ;;
                (6)
                    AUDIO_OPTS+=(-filter:a:$i aformat=channel_layouts="5.1")
                    ;;
                (8)
                    AUDIO_OPTS+=(-filter:a:$i aformat=channel_layouts="7.1")
                    ;;
                (*)
                    printf "Unknown channel layout with %d channels.\n" $channels >&2
                    exit 1
            esac
        fi
    else
        AUDIO_OPTS+=(-c:a:$i copy)
    fi
    ((i++))
done


## Run FFmpeg
if $NEEDS_TRANSCODING ; then
    set -x
    ffmpeg -hide_banner \
           -n \
           -i "$INPUT_FILE" \
           -map_metadata 0 \
           -map_chapters 0 \
           -c:s webvtt \
           "${(@)VIDEO_OPTS}" \
           "${(@)AUDIO_OPTS}" \
           "$OUTPUT_FILE"
    set +x
else
    echo "No transcoding needed." >&2
    exit -1
fi
