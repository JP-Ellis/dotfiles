#+title: Doom Packages
#+property: header-args :tangle packages.el
#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src
To install a package with Doom you must declare them here and run ~doom sync~ on
the command line, then restart Emacs for the changes to take effect -- or use
~M-x doom/reload~.
* Package Installation
The addition of a package is done using the ~package!~ function.

To install a package from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! some-package)
#+end_src
To install a package directly from a remote git repo, you must specify a
`:recipe'. You'll find documentation on what `:recipe' accepts here:
https://github.com/raxod502/straight.el#the-recipe-format
#+begin_src emacs-lisp :tangle no
(package! another-package
    :recipe (:host github :repo "username/repo"))
#+end_src
If the package you are trying to install does not contain a ~PACKAGENAME.el~ file,
or is located in a subdirectory of the repo, you'll need to specify ~:files~ in
the ~:recipe~:
#+begin_src emacs-lisp :tangle no
(package! this-package
    :recipe (:host github :repo "username/repo"
    :files ("some-file.el" "src/lisp/*.el")))
#+end_src
If you'd like to disable a package included with Doom, you can do so here with
the ~:disable~ property:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :disable t)
#+end_src
You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src
Specify a ~:branch~ to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't =master= (which
our package manager can't deal with; see raxod502/straight.el#279)
#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:branch "develop"))
#+end_src
Use ~:pin~ to specify a particular commit to install.
#+begin_src emacs-lisp :tangle no
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src
Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...
#+begin_src emacs-lisp :tangle no

(unpin! pinned-package)
#+end_src
...or multiple packages
#+begin_src emacs-lisp :tangle no
(unpin! pinned-package another-pinned-package)
#+end_src
...Or *all* packages (NOT RECOMMENDED; will likely break things)
#+begin_src emacs-lisp :tangle no
(unpin! t)
#+end_src
* Temporary Fixes
** envrc missing ~Info-directory-list~
See the details from [[https://github.com/purcell/envrc/issues/117][purcell/envrc#117]], pinning to an older version for now.
#+begin_src emacs-lisp
(package! envrc :pin "107dae065df857271cd3371d9f520ff13df695cf")
#+end_src
* Packages
** Arch Linux PKGBUILD
#+begin_src emacs-lisp
(package! pkgbuild-mode
  :recipe (:host github :repo "juergenhoetzel/pkgbuild-mode"))
#+end_src
** Doom Themes
Unpin the doom themes to get the latest version.
#+begin_src emacs-lisp
(unpin! doom-themes)
#+end_src
** Github Copilot
#+begin_src emacs-lisp
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el"))
#+end_src
** Org
*** Roam
The ~org-roam-ui~ packages tries to keep up with the latest changes from
~org-roam~ and thus doesn't generally work with the pinned package in Doom.
#+begin_src emacs-lisp
(unpin! org-roam)
(package! org-roam-ui)
#+end_src
*** Ref
#+begin_src emacs-lisp
(package! org-ref)
#+end_src
*** Padding
#+begin_src emacs-lisp
(package! org-padding
  :recipe (:host github :repo "TonCherAmi/org-padding"))
#+end_src
** Python
*** Ruff LSP
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(python-mode . ("ruff" "server"))))

#+end_src
** Spell-Fu
#+begin_src emacs-lisp
(unpin! spell-fu)
#+end_src
** Xah Wolfram Mode
#+begin_src emacs-lisp
(package! xah-wolfram-mode
  :recipe (:host github :repo "xahlee/xah-wolfram-mode"))
#+end_src

;; Local Variables:
;; eval: (add-hook 'after-save-hook #'org-babel-tangle 0 t)
;; End:
