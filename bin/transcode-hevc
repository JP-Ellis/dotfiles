#!/usr/bin/env bash
# shellcheck shell=bash

# Prevent using unset variables.
set -u
# Exit on error
set -e
# Debug
# set -x

################################################################################
## Utility Functions
################################################################################
# Print a message to the output with word wrapping
#
# Usage: _print <prefix> <colour> <message>
#
# which will print '[<prefix>] <message>', with `<prefix>` in the
# specified tput colour index.
_print() {
  (
    set +x
    local _cols
    local _color
    local _reset
    if check_cmd tput; then
      _cols=$(tput cols)
      _color=$(tput setaf "$2")
      _reset=$(tput sgr0)
    else
      _cols=${COLUMNS:-80}
      _color=""
      _reset=""
    fi

    _cols=$((_cols - 21))
    local _prefix="$1"
    local _message="$3"

    printf '%s %s\n' "[${_color}${_prefix}${_reset}]" "$_message" >&2
  )
}

# Debug message. Only prints if TRANSCODE_VERBOSE is set and can be silenced
# with TRANSCODE_QUIET.
debug() {
  if [ -n "${TRANSCODE_VERBOSE-}" ] && [ -z "${TRANSCODE_QUIET-}" ]; then
    _print Debug 4 "$1"
  fi
}

# Info message. Can be silenced with TRANSCODE_QUIET.
info() {
  if [ -z "${TRANSCODE_QUIET-}" ]; then
    _print Info 2 "$1"
  fi
}

# Warning message. Cannot be silenced.
warn() {
  _print Warning 3 "$1"
}

# Error message and exit. Cannot be silenced.
err() {
  _print Error 1 "$1"
  exit 255
}

# Check if a command exists
check_cmd() {
  command -v "$1" >/dev/null 2>&1
}

# Assert that a command exists
need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

# Assert that a variable is not empty
assert_nz() {
  if [ -z "$1" ]; then err "assert_nz $2"; fi
}

# Run a command that should never fail. If the command fails execution will
# immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

################################################################################
## Functionality
################################################################################
## Code specific to this script

## List the video codecs and widths in a colon-separated list
##
## Assigns the codecs and widths to the arrays passed by reference.
read_video_codecs() {
  local -n _codecs=$2
  local -n _widths=$3
  local codec width
  for stream in $(ffprobe "$1" -v error -select_streams v -show_entries stream=codec_name,width -of csv=p=0); do
    IFS=, read -r codec width <<<"$stream"
    _codecs+=("$codec")
    _widths+=("$width")
  done
}

## Convert a standard resolution (e.g., 720, 1080, 2160 as well as hd, fhd, uhd, 4k, etc.)
## to a width in pixels.
resolution_to_width() {
  case "$1" in
  720 | hd)
    echo "1280"
    ;;
  1080 | fhd)
    echo "1920"
    ;;
  2160 | uhd | 4k)
    echo "3840"
    ;;
  *)
    err "Unknown resolution '$1'"
    ;;
  esac
}

## Add filter for rescaling video to a specific resolution
##
## This function uses a nameref to modify the video_opts array in place. To
## use this function, you must pass the video_opts array by reference:
##
##   local -a video_opts
##   append_rescale_filter video_opts hd
append_rescale_filter() {
  local -n opts=$1
  local resolution="$2"
  local width

  if [ -n "$resolution" ]; then
    width=$(resolution_to_width "$resolution")
    opts+=("-filter:v" "scale=w='min($width,iw)':h=-1:flags=spline+accurate_rnd")
  fi
}

## Generate the arguments for transcoding the video streams
##
## This function uses a nameref to modify the ffmpeg_opts array in place. To
## use this function, you must pass the ffmpeg_opts array by reference:
##
##   local -a ffmpeg_opts
##   generate_video_args ffmpeg_opts file [resolution]
generate_video_opts() {
  # shellcheck disable=SC2178
  local -n opts=$1
  local file="$2"
  local resolution="$3"

  local -a codecs=()
  local -a widths=()
  read_video_codecs "$file" codecs widths

  local stream_idx=0
  while [ $stream_idx -lt ${#codecs[@]} ]; do
    local codec=${codecs[$stream_idx]}
    local width=${widths[$stream_idx]}

    if
      [ -n "${FORCE_VIDEO-}" ] ||
        [ "$codec" != "hevc" ] ||
        { [ -n "$resolution" ] && [ "$width" -gt "$(resolution_to_width "$resolution")" ]; }
    then
      case $codec in
      mjpeg | dvbsub | pgsub)
        # Some video streams are actually images, and therefore should not be
        # transcoded
        debug "Video stream $stream_idx is an image, copying"
        opts+=(-map "0:v:$stream_idx" "-codec:v:$stream_idx" copy)
        ;;
      *)
        NEEDS_TRANSCODING=true

        # -a53cc 0 is required due to an upstream bug: https://trac.ffmpeg.org/ticket/10411
        debug "Transcoding video stream $stream_idx to HEVC"
        opts+=(-map "0:v:$stream_idx" "-codec:v:$stream_idx" libx265 -preset slow -x265-params aq-mode=3 -a53cc 0)

        if [ -n "$resolution" ]; then
          debug "Rescaling video stream $stream_idx to $resolution"
          append_rescale_filter ffmpeg_opts "$resolution"
        fi
        ;;
      esac
    else
      debug "Copying video stream $stream_idx"
      opts+=(-map "0:v:$stream_idx" "-codec:v:$stream_idx" copy)
    fi

    stream_idx=$((stream_idx + 1))
  done
}

## Output the list of audio codecs and channels in a colon-separated list
##
## Example output:
##   aac:2:opus:6
read_audio_codecs() {
  # shellcheck disable=SC2178
  local -n _codecs=$2
  local -n _channels=$3
  local codec channel
  for stream in $(ffprobe "$1" -v error -select_streams a -show_entries stream=codec_name,channels -of csv=p=0); do
    IFS=, read -r codec channel <<<"$stream"
    _codecs+=("$codec")
    _channels+=("$channel")
  done
}

generate_audio_opts() {
  # shellcheck disable=SC2178
  local -n opts=$1
  local file="$2"

  local -a codecs=()
  local -a channels=()
  read_audio_codecs "$file" codecs channels

  local stream_idx=0
  while [ $stream_idx -lt ${#codecs[@]} ]; do
    local codec=${codecs[$stream_idx]}
    local channel=${channels[$stream_idx]}

    if
      [ -n "${FORCE_AUDIO-}" ] ||
        [ "$codec" != "opus" ]
    then
      NEEDS_TRANSCODING=true
      opts+=(-map "0:a:$stream_idx" "-codec:a:$stream_idx" libopus)

      case $channel in
      1)
        debug "Transcoding audio stream $stream_idx to Opus (mono)"
        opts+=("-filter:a:$stream_idx" aformat=channel_layouts="mono" "-b:a:$stream_idx" 64k)
        ;;
      2)
        debug "Transcoding audio stream $stream_idx to Opus (stereo)"
        opts+=("-filter:a:$stream_idx" aformat=channel_layouts="stereo" "-b:a:$stream_idx" 96k)
        ;;
      6)
        debug "Transcoding audio stream $stream_idx to Opus (5.1)"
        opts+=("-filter:a:$stream_idx" aformat=channel_layouts="5.1" "-b:a:$stream_idx" 128k)
        ;;
      8)
        debug "Transcoding audio stream $stream_idx to Opus (7.1)"
        opts+=("-filter:a:$stream_idx" aformat=channel_layouts="7.1" "-b:a:$stream_idx" 256k)
        ;;
      *)
        err "Unknown channel layout with $channel channels"
        ;;
      esac
    else
      debug "Copying audio stream $stream_idx"
      opts+=(-map "0:a:$stream_idx" "-codec:a:$stream_idx" copy)
    fi

    stream_idx=$((stream_idx + 1))
  done
}

## Output the list of subtitle codecs in a colon-separated list
##
## Example output:
##   webvtt:webvtt:webvtt
read_subtitle_codecs() {
  # shellcheck disable=SC2178
  local -n _codecs=$2
  local codec
  for stream in $(ffprobe "$1" -v error -select_streams s -show_entries stream=codec_name -of csv=p=0); do
    IFX=, read -r codec <<<"$stream"
    _codecs+=("$stream")
  done
}

generate_subtitle_opts() {
  # shellcheck disable=SC2178
  local -n opts=$1
  local file="$2"

  local -a codecs=()
  read_subtitle_codecs "$file" codecs

  local stream_idx=0
  local codec
  while [ $stream_idx -lt ${#codecs[@]} ]; do
    codec=${codecs[$stream_idx]}

    case $codec in
    webvtt)
      debug "Copying subtitle stream $stream_idx"
      opts+=(-map "0:s:$stream_idx" "-codec:s:$stream_idx" copy)
      ;;
    hdmv_pgs_subtitle)
      debug "Copying picture subtitle stream $stream_idx"
      opts+=(-map "0:s:$stream_idx" "-codec:s:$stream_idx" copy)
      ;;
    dvd_subtitle)
      debug "Copying picture subtitle stream $stream_idx"
      opts+=(-map "0:s:$stream_idx" "-codec:s:$stream_idx" copy)
      ;;
    unknown)
      debug "Unknown subtitle stream $stream_idx codec '$codec', ignoring"
      # Ignore
      ;;
    *)
      NEEDS_TRANSCODING=true
      debug "Transcoding subtitle stream $stream_idx to WebVTT"
      opts+=(-map "0:s:$stream_idx" "-codec:s:$stream_idx" webvtt)
      ;;
    esac

    stream_idx=$((stream_idx + 1))
  done
}

lockfile() {
  local _lockfile="$1.lock"
  echo "$_lockfile"
}

lock() {
  local _lockfile
  _lockfile="$(lockfile "$1")"
  if [ -e "$_lockfile" ]; then
    warn "Loc file $_lockfile exists"
    exit 1
  fi
  ensure touch "$_lockfile"
}

unlock() {
  local _lockfile
  _lockfile="$(lockfile "$1")"
  if [ ! -e "$_lockfile" ]; then
    err "Lock file $_lockfile does not exist"
  fi
  ensure rm "$_lockfile"
}

################################################################################
## Main
################################################################################

usage() {
  echo "Usage: ${0##*/} [options] INPUT [OUTPUT]"
  cat <<EOF
Options

  -h, --help            Print this help message
  -v, --verbose         Print debug messages
  -q, --quiet           Suppress info messages

  -c, --check           Check whether the file needs transcoding, returning:
                        0    Transcoding needed
                        1    No transcoding needed
                        255  Error
  -r, --recheck         Before transcoding, perform a check and only proceed
                        if transcoding is needed, otherwise exits with status 2

  -i, --force-video     Force transcoding the video streams
  -a, --force-audio     Force transcoding the audio streams

  --rescale RES         If a video stream is larger than the specified
                        resolution, rescale it to that resolution.  RES can
                        be one of: 720, 1080, 2160, hd, fhd, uhd, 4k
EOF
  exit 0
}

parse_args() {
  local args
  args=$(getopt \
    --name "${0##*/}" \
    --options "hvqcria" \
    --longoptions "help,verbose,quiet,check,recheck,force-video,force-audio,rescale:" \
    -- "$@")
  # shellcheck disable=SC2181
  if [ $? -ne 0 ]; then
    err "Failed to parse arguments"
  fi

  eval set -- "$args"
  while :; do
    case "$1" in
    -h | --help)
      usage
      ;;
    -v | --verbose)
      TRANSCODE_VERBOSE=${TRANSCODE_VERBOSE:-1}
      shift
      ;;
    -q | --quiet)
      TRANSCODE_QUIET=${TRANSCODE_QUIET:-1}
      shift
      ;;
    -c | --check)
      CHECK=1
      shift
      ;;
    -r | --recheck)
      RECHECK=1
      shift
      ;;
    -i | --force-video)
      FORCE_VIDEO=1
      shift
      ;;
    -a | --force-audio)
      FORCE_AUDIO=1
      shift
      ;;
    --rescale)
      RESCALE="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      err "Unknown option: $1"
      ;;
    esac
  done

  INPUT_FILE="$1"
  shift

  if [ -n "${1-}" ]; then
    OUTPUT_FILE="$1"
    shift
  else
    OUTPUT_FILE="${INPUT_FILE%.*}.mkv"
  fi

  if [ $# -ge 1 ]; then
    err "Unknown arguments: $*"
  fi
}

main() {
  parse_args "$@"

  # Check for required commands
  need_cmd ffprobe
  need_cmd ffmpeg

  if [ -n "${RECHECK-}" ]; then
    local -a check_opts=()
    [ -n "${TRANSCODE_VERBOSE-}" ] && check_opts+=(-v)
    [ -n "${TRANSCODE_QUIET-}" ] && check_opts+=(-q)
    [ -n "${RESCALE-}" ] && check_opts+=(--rescale "$RESCALE")

    info "Rechecking $INPUT_FILE"
    "$0" --check "${check_opts[@]}" "$INPUT_FILE"
    local retval=$?
    case $retval in
    0)
      info "Transcoding needed, proceeding"
      ;;
    1)
      info "No transcoding needed, skipping"
      return 2
      ;;
    *)
      err "Failed recheck: $retval"
      ;;
    esac
  fi

  tmpfile="${INPUT_FILE%.*}"
  tmpfile="${TMPDIR:-/tmp}/${tmpfile##*/}-$RANDOM.mkv"
  rm -f "$tmpfile"
  local -a ffmpeg_opts=()

  # Don't override a file if it already exists
  ffmpeg_opts+=(-n)
  # Hide FFmpeg banner
  ffmpeg_opts+=(-hide_banner)

  # Add the input file
  ffmpeg_opts+=(-i "$INPUT_FILE")

  local NEEDS_TRANSCODING=false

  # Generate the video options
  generate_video_opts ffmpeg_opts "$INPUT_FILE" "${RESCALE-}"

  # Generate the audio options
  generate_audio_opts ffmpeg_opts "$INPUT_FILE"

  # Generate the subtitle options
  generate_subtitle_opts ffmpeg_opts "$INPUT_FILE"

  # Map metadata and chapters
  ffmpeg_opts+=(-map_metadata 0 -map_chapters 0)

  # If we were just performing a check, we just need to check the transcoding
  # status.
  if [ -n "${CHECK-}" ]; then
    if $NEEDS_TRANSCODING; then
      return 0
    else
      return 1
    fi
  fi

  if ! $NEEDS_TRANSCODING; then
    info "No transcoding needed."
    return 0
  fi

  lock "$INPUT_FILE"

  cleanup() {
    rm "$(lockfile "$INPUT_FILE")" || warn "Failed to remove lock file"
    if [ -e "$tmpfile" ]; then
      rm "$tmpfile" || warn "Failed to remove temporary file"
    fi
  }

  trap cleanup EXIT

  # Run FFmpeg
  info "Transcoding $INPUT_FILE to $tmpfile"
  ensure ffmpeg \
    "${ffmpeg_opts[@]}" \
    "$tmpfile"

  info "Moving $tmpfile to $OUTPUT_FILE"
  ensure mv "$tmpfile" "$OUTPUT_FILE"

  # If the input and output files are different, remove the input file
  if [ "$INPUT_FILE" != "$OUTPUT_FILE" ]; then
    info "Removing $INPUT_FILE"
    ensure rm "$INPUT_FILE"
  fi

  unlock "$INPUT_FILE"
}

main "$@"
